From 84aeb0832a569be5eaaabde1ffb5e3d89f03776a Mon Sep 17 00:00:00 2001
From: mw-agadkari <agadkari@mathworks.com>
Date: Mon, 21 Oct 2024 13:50:20 -0400
Subject: [PATCH] drivers/dma: Remove partial transfers for ADI DMAC

---
 drivers/dma/dma-axi-dmac.c | 104 ++++---------------------------------
 1 file changed, 11 insertions(+), 93 deletions(-)

diff --git a/drivers/dma/dma-axi-dmac.c b/drivers/dma/dma-axi-dmac.c
index 1b78e54c2630..66c1ad9077ca 100644
--- a/drivers/dma/dma-axi-dmac.c
+++ b/drivers/dma/dma-axi-dmac.c
@@ -82,8 +82,8 @@
 #define AXI_DMAC_REG_DBG0		0x43c
 #define AXI_DMAC_REG_DBG1		0x440
 #define AXI_DMAC_REG_DBG2		0x444
-#define AXI_DMAC_REG_PARTIAL_XFER_LEN	0x44c
-#define AXI_DMAC_REG_PARTIAL_XFER_ID	0x450
+//#define AXI_DMAC_REG_PARTIAL_XFER_LEN	0x44c
+//#define AXI_DMAC_REG_PARTIAL_XFER_ID	0x450
 
 #define AXI_DMAC_CTRL_ENABLE		BIT(0)
 #define AXI_DMAC_CTRL_PAUSE		BIT(1)
@@ -93,9 +93,9 @@
 
 #define AXI_DMAC_FLAG_CYCLIC		BIT(0)
 #define AXI_DMAC_FLAG_LAST		BIT(1)
-#define AXI_DMAC_FLAG_PARTIAL_REPORT	BIT(2)
+//#define AXI_DMAC_FLAG_PARTIAL_REPORT	BIT(2)
 
-#define AXI_DMAC_FLAG_PARTIAL_XFER_DONE BIT(31)
+//#define AXI_DMAC_FLAG_PARTIAL_XFER_DONE BIT(31)
 
 /* The maximum ID allocated by the hardware is 31 */
 #define AXI_DMAC_SG_UNUSED 32U
@@ -108,7 +108,6 @@ struct axi_dmac_sg {
 	unsigned int dest_stride;
 	unsigned int src_stride;
 	unsigned int id;
-	unsigned int partial_len;
 	bool schedule_when_free;
 };
 
@@ -139,7 +138,6 @@ struct axi_dmac_chan {
 	unsigned int address_align_mask;
 	unsigned int length_align_mask;
 
-	bool hw_partial_xfer;
 	bool hw_cyclic;
 	bool hw_2d;
 };
@@ -238,12 +236,14 @@ static void axi_dmac_start_transfer(struct axi_dmac_chan *chan)
 	}
 
 	desc->num_submitted++;
-	if (desc->num_submitted == desc->num_sgs ||
-	    desc->have_partial_xfer) {
+	if (desc->num_submitted == desc->num_sgs) {
 		if (desc->cyclic)
+		{
 			desc->num_submitted = 0; /* Start again */
-		else
+		}			
+		else{
 			chan->next_desc = NULL;
+		}
 		flags |= AXI_DMAC_FLAG_LAST;
 	} else {
 		chan->next_desc = desc;
@@ -270,9 +270,6 @@ static void axi_dmac_start_transfer(struct axi_dmac_chan *chan)
 		desc->num_sgs == 1)
 		flags |= AXI_DMAC_FLAG_CYCLIC;
 
-	if (chan->hw_partial_xfer)
-		flags |= AXI_DMAC_FLAG_PARTIAL_REPORT;
-
 	axi_dmac_write(dmac, AXI_DMAC_REG_X_LENGTH, sg->x_len - 1);
 	axi_dmac_write(dmac, AXI_DMAC_REG_Y_LENGTH, sg->y_len - 1);
 	axi_dmac_write(dmac, AXI_DMAC_REG_FLAGS, flags);
@@ -294,73 +291,6 @@ static inline unsigned int axi_dmac_total_sg_bytes(struct axi_dmac_chan *chan,
 		return sg->x_len;
 }
 
-static void axi_dmac_dequeue_partial_xfers(struct axi_dmac_chan *chan)
-{
-	struct axi_dmac *dmac = chan_to_axi_dmac(chan);
-	struct axi_dmac_desc *desc;
-	struct axi_dmac_sg *sg;
-	u32 xfer_done, len, id, i;
-	bool found_sg;
-
-	do {
-		len = axi_dmac_read(dmac, AXI_DMAC_REG_PARTIAL_XFER_LEN);
-		id  = axi_dmac_read(dmac, AXI_DMAC_REG_PARTIAL_XFER_ID);
-
-		found_sg = false;
-		list_for_each_entry(desc, &chan->active_descs, vdesc.node) {
-			for (i = 0; i < desc->num_sgs; i++) {
-				sg = &desc->sg[i];
-				if (sg->id == AXI_DMAC_SG_UNUSED)
-					continue;
-				if (sg->id == id) {
-					desc->have_partial_xfer = true;
-					sg->partial_len = len;
-					found_sg = true;
-					break;
-				}
-			}
-			if (found_sg)
-				break;
-		}
-
-		if (found_sg) {
-			dev_dbg(dmac->dma_dev.dev,
-				"Found partial segment id=%u, len=%u\n",
-				id, len);
-		} else {
-			dev_warn(dmac->dma_dev.dev,
-				 "Not found partial segment id=%u, len=%u\n",
-				 id, len);
-		}
-
-		/* Check if we have any more partial transfers */
-		xfer_done = axi_dmac_read(dmac, AXI_DMAC_REG_TRANSFER_DONE);
-		xfer_done = !(xfer_done & AXI_DMAC_FLAG_PARTIAL_XFER_DONE);
-
-	} while (!xfer_done);
-}
-
-static void axi_dmac_compute_residue(struct axi_dmac_chan *chan,
-	struct axi_dmac_desc *active)
-{
-	struct dmaengine_result *rslt = &active->vdesc.tx_result;
-	unsigned int start = active->num_completed - 1;
-	struct axi_dmac_sg *sg;
-	unsigned int i, total;
-
-	rslt->result = DMA_TRANS_NOERROR;
-	rslt->residue = 0;
-
-	/*
-	 * We get here if the last completed segment is partial, which
-	 * means we can compute the residue from that segment onwards
-	 */
-	for (i = start; i < active->num_sgs; i++) {
-		sg = &active->sg[i];
-		total = axi_dmac_total_sg_bytes(chan, sg);
-		rslt->residue += (total - sg->partial_len);
-	}
-}
 
 static bool axi_dmac_transfer_done(struct axi_dmac_chan *chan,
 	unsigned int completed_transfers)
@@ -373,10 +303,6 @@ static bool axi_dmac_transfer_done(struct axi_dmac_chan *chan,
 	if (!active)
 		return false;
 
-	if (chan->hw_partial_xfer &&
-	    (completed_transfers & AXI_DMAC_FLAG_PARTIAL_XFER_DONE))
-		axi_dmac_dequeue_partial_xfers(chan);
-
 	do {
 		sg = &active->sg[active->num_completed];
 		if (sg->id == AXI_DMAC_SG_UNUSED) /* Not yet submitted */
@@ -390,14 +316,10 @@ static bool axi_dmac_transfer_done(struct axi_dmac_chan *chan,
 			start_next = true;
 		}
 
-		if (sg->partial_len)
-			axi_dmac_compute_residue(chan, active);
-
 		if (active->cyclic)
 			vchan_cyclic_callback(&active->vdesc);
 
-		if (active->num_completed == active->num_sgs ||
-		    sg->partial_len) {
+		if (active->num_completed == active->num_sgs ) {
 			if (active->cyclic) {
 				active->num_completed = 0; /* wrap around */
 			} else {
@@ -739,8 +661,6 @@ static bool axi_dmac_regmap_rdwr(struct device *dev, unsigned int reg)
 	case AXI_DMAC_REG_DBG0:
 	case AXI_DMAC_REG_DBG1:
 	case AXI_DMAC_REG_DBG2:
-	case AXI_DMAC_REG_PARTIAL_XFER_LEN:
-	case AXI_DMAC_REG_PARTIAL_XFER_ID:
 		return true;
 	default:
 		return false;
@@ -751,7 +671,7 @@ static const struct regmap_config axi_dmac_regmap_config = {
 	.reg_bits = 32,
 	.val_bits = 32,
 	.reg_stride = 4,
-	.max_register = AXI_DMAC_REG_PARTIAL_XFER_ID,
+	.max_register = AXI_DMAC_REG_DBG2,
 	.readable_reg = axi_dmac_regmap_rdwr,
 	.writeable_reg = axi_dmac_regmap_rdwr,
 };
@@ -918,8 +838,6 @@ static int axi_dmac_detect_caps(struct axi_dmac *dmac, unsigned int version)
 		return -ENODEV;
 	}
 
-	if (version >= ADI_AXI_PCORE_VER(4, 2, 'a'))
-		chan->hw_partial_xfer = true;
 
 	if (version >= ADI_AXI_PCORE_VER(4, 1, 'a')) {
 		axi_dmac_write(dmac, AXI_DMAC_REG_X_LENGTH, 0x00);
-- 
2.25.1

